---
- name: Validate role arguments
  assert:
    that:
      - 'master_name is defined'

- name: Gather plugin information
  jenkins_ssh_cli_facts:
    gather_subset: '!all,plugins'
  connection: oc
  register: plugins_list

- name: Get jobs xml
  set_fact:
    jobs_list: "{{ query(
      'jjb_jobs_xml',
      master_name + '-projects:yaml',
      chdir=jenkins_jobs_yaml_source,
      recursive=True,
      allow_empty_variables=True,
      plugin_info=plugins_list.jenkins_facts.jenkins_plugins
    ) }}"

- name: Read jobs cache file
  slurp:
    src: "{{ jenkins_jobs_cache_dest }}"
  register: slurp_jobs_cache
  connection: oc
  failed_when: False

- name: Upload job XML
  vars:
    # Need to base64-decode the job cache content because the `slurp` module
    # encodes it in transit
    jobs_cache: "{{
      slurp_jobs_cache.content|b64decode|from_yaml
      if 'content' in slurp_jobs_cache
      else []
    }}"
  command:
    argv: [
      'ssh',
      '-o', 'StrictHostKeyChecking=no',
      '-o', 'UserKnownHostsFile=/dev/null',
      'admin@localhost', '-p', '2222',
      "{{ (item in jobs_cache)|ternary('update-job', 'create-job') }}",
      "{{ item }}",
    ]
    stdin: "{{ jobs_list[item] }}"
  connection: oc
  loop: "{{ jobs_list | list }}"
  when: |-
    item not in jobs_cache
    or jobs_list[item]|hash('sha1') != jobs_cache[item]

- name: Upload job cache
  template:
    src: jobs_cache.yaml.j2
    dest: "{{ jenkins_jobs_cache_dest }}"
  connection: oc
