- builder:
    name: system-tests
    builders:
      - cleanup-slave
      - global-setup
      - upstream-source-collector:
          project: '{project}'
      - project-setup
      - shell: |
          if [[ ${{CREATE_IMAGES}} = "yes" ]]; then
              touch ${{PROJECT}}/CREATE_IMAGES.marker
          fi
          if [[ ${{COVERAGE}} = "yes" ]]; then
              touch ${{PROJECT}}/COVERAGE.marker
          fi
      - shell: |
          #!/bin/bash -ex
          ## check which version of lago to use, and append to .repos
          if ! [[ -z "${{LAGO_CUSTOM_REPO// }}" ]]; then
              timestamp=$(date +%s)
              for repo in $(find ${{PROJECT}}/automation/ -type f -name '*.repos*'); do
                  sed -i '/^lago/ d' "$repo"
                  echo "lago_injected-$timestamp,$LAGO_CUSTOM_REPO" >> "$repo"
              done
          fi
      - shell: |
          ## update extra source if we got it as param ###
          if ! [ -z ${{CUSTOM_REPOS+x}} ]; then
            echo "$CUSTOM_REPOS" > ${{PROJECT}}/${{SUITE_TYPE}}-suite-${{ENGINE_VERSION}}/extra_sources
          fi
          ## update the fallback source
          if [[ ${{FALLBACK_REPO}} = "latest_tested"  ]]; then
            echo "rec:http://plain.resources.ovirt.org/repos/ovirt/experimental/{version}/latest.tested/rpm/{chroot_distro}" >> ${{PROJECT}}/${{SUITE_TYPE}}-suite-${{ENGINE_VERSION}}/extra_sources
          fi
      - shell: |
          #!/usr/bin/env python
          # Try to inject CI mirrors
          import sys
          from os import environ, path
          sys.path.append('jenkins')
          from scripts.mirror_client import (
              inject_yum_mirrors_file_by_pattern, mirrors_from_environ, setupLogging
          )

          setupLogging()
          suit_dir = path.expandvars("${{PROJECT}}/{suite_type}-suite-{version}")
          inject_yum_mirrors_file_by_pattern(
              mirrors_from_environ('CI_MIRRORS_URL'),
              path.join(suit_dir, '*.repo'),
          )
      - shell: |
          # make sure there's no prefix or lago will fail
          rm -rf "${{PROJECT}}/deployment-{suite_type}_suite_{version}"
      - mock_runner:
          project: '{project}'
          distro: '{chroot_distro}'
          arch: 'x86_64'
          action: '--execute-script "automation/{suite_type}_suite_{version}.sh"'
